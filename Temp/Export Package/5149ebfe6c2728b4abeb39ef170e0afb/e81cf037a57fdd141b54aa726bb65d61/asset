using UnityEngine;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System;
using System.Runtime.InteropServices;



public class PicoVRIOSDevice : PicoVRBaseDevice
{
	public static int PVR_GLEventID = 7001;

	[DllImport("__Internal")]
	public static extern void PVR_Init_Native ( );

	[DllImport("__Internal")]
	public static extern float PVR_FOV_Native();

	[DllImport("__Internal")]
	public static extern float PVR_Separation_Native();

	[DllImport("__Internal")]
	public static extern void PVR_RenderTexturenSize_Native (ref int width, ref int height);

	[DllImport("__Internal")]
	public static extern void PVR_UpdateRenderParams_Native(float[] renderParams,float zNear, float zFar);

	[DllImport("__Internal")]
	public static extern int PVR_HeadWearType_Native ();

	[DllImport("__Internal")]
	public static extern void PVR_ChangeHeadWearType_Native (int type);

	[DllImport("__Internal")]
	public static extern void PVR_SetRenderTextureID_Native (int eye, int texID);

	[DllImport("__Internal")]
	public static extern void PVR_ResetHeadTrack_Native ();
	[DllImport("__Internal")]
	public static extern void PVR_StartHeadTrack_Native ();
	[DllImport("__Internal")]
	public static extern void PVR_StopHeadTrack_Native ();

	private string model;
	private float fov = 90f;
	private Quaternion rot;
	private Vector3 pos;
	private static readonly Matrix4x4 flipZ = Matrix4x4.Scale(new Vector3(1, 1, -1));
	private int deviceType = -1;

	public PicoVRIOSDevice()
	{
		PVR_Init_Native ();
		CreateRenderTextureArray ();
	}
	
#region 创建贴图
	private void CreateRenderTextureArray()
	{
		for (int i = 0; i < 2; i++)
		{
			if (null == eyeTextures[i])
			{
				try
				{
					ConfigureEyeTexture(i);
				}
				catch (Exception)
				{
					Debug.LogError("ERROR");
					throw;
				}
			}
		}
	}
	
	
	private void ConfigureEyeTexture(int eyeTextureIndex)
	{
		Vector2 renderTexSize = GetStereoScreenSize();
		int x = (int)renderTexSize.x;
		int y = (int)renderTexSize.y;
		eyeTextures[eyeTextureIndex] = new RenderTexture(x, y, (int)PicoVRManager.SDK.RtBitDepth, PicoVRManager.SDK.RtFormat);
		eyeTextures[eyeTextureIndex].anisoLevel = 0;
		eyeTextures[eyeTextureIndex].antiAliasing = Mathf.Max(QualitySettings.antiAliasing, (int)PicoVRManager.SDK.RtAntiAlising);
		
		eyeTextures[eyeTextureIndex].Create();
		if (eyeTextures[eyeTextureIndex].IsCreated())
		{
			eyeTextureIds[eyeTextureIndex] = eyeTextures[eyeTextureIndex].GetNativeTexturePtr().ToInt32();
			Debug.Log("eyeTextureIndex : " + eyeTextureIndex.ToString());
		}
		
	}
#endregion

#region 更新每一帧的状态
	public void UpdateFrameParamsFromActivity()
	{
		float[] frameInfo = UpdateRenderParams(1.0f, 1000.0f);
		int j = 0;
		for (int i = 0; i < 16; ++i, ++j)
		{
			Debug.Log("headView["+i+"] : " +  frameInfo[j]);
			PicoVRManager.SDK.headView[i] = frameInfo[j];
		}
		PicoVRManager.SDK.headView = flipZ * PicoVRManager.SDK.headView.inverse * flipZ;
	}

	public float[] UpdateRenderParams(float zNear, float zFar)
	{
		float[] frameInfo = new float[16];
		PVR_UpdateRenderParams_Native(frameInfo, zNear, zFar);
		return frameInfo;
	}
		
	public override void UpdateState()
	{	int device = PVR_HeadWearType_Native();
		if (device != this.deviceType) {
			this.deviceType = device;
			UpdateScreenData ();
		}
		UpdateFrameParamsFromActivity();
		this.fov = PVR_FOV_Native();
		rot = Quaternion.LookRotation(PicoVRManager.SDK.headView.GetColumn(2), PicoVRManager.SDK.headView.GetColumn(1));
		pos = PicoVRManager.SDK.headView.GetColumn(3);
		PicoVRManager.SDK.eyeFov = fov;
		PicoVRManager.SDK.headPose.Set(pos, rot);
	}
#endregion

	public override Vector2 GetStereoScreenSize()
	{
		int width = 0, height = 0;
		PVR_RenderTexturenSize_Native (ref width, ref height);
		return new Vector2(width,height);
	}
	public override void UpdateScreenData()
	{
		ComputeEyesFromProfile();
	}

    public override float GetSeparation()
    {
		float separation = PVR_Separation_Native ();
		return separation;
    }
		
    public override void ChangeHeadwear(int headwear) { 
		PVR_ChangeHeadWearType_Native ( headwear );
	}

	public override void StartHeadTrack ()
	{
		PVR_StartHeadTrack_Native ();
	}
	public override void StopHeadTrack ()
	{
		PVR_StopHeadTrack_Native ();
	}

	public override void ResetHeadTrack ()
	{
		PVR_ResetHeadTrack_Native ();
	}

	#region  
	
	bool canConnecttoActivity = true;
	public override bool CanConnecttoActivity {
		get {
			return canConnecttoActivity;
		}
		set {
			canConnecttoActivity = value;
		}
	}
	
	public override void Destroy ()
	{
		base.Destroy ();
	}
	#endregion
}
